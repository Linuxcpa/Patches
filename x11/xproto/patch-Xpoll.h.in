$NetBSD$

--- Xpoll.h.in.orig	2014-03-26 22:32:15.000000000 +0000
+++ Xpoll.h.in
@@ -87,28 +87,28 @@ typedef long fd_mask;
 
 #if defined(BSD) && BSD < 198911 
 typedef struct fd_set {
-	fd_mask fds_bits[howmany(FD_SETSIZE, NFDBITS)];
+	fd_mask bits[howmany(FD_SETSIZE, NFDBITS)];
 } fd_set;
 #endif
 
 # define Select(n,r,w,e,t) select(n,(fd_set*)r,(fd_set*)w,(fd_set*)e,(struct timeval*)t)
 
-#define __X_FDS_BITS @USE_FDS_BITS@
+#define __X_BITS @USE_BITS@
 
-#ifndef __FDS_BITS
-# define __FDS_BITS(p)  ((p)->__X_FDS_BITS)
+#ifndef __BITS
+# define __BITS(p)  ((p)->__X_BITS)
 #endif
 
-#define __XFDS_BITS(p, n) (__FDS_BITS(p))[n]
+#define __XBITS(p, n) (__BITS(p))[n]
 
 #ifndef FD_SET
-#define FD_SET(n, p)    (__XFDS_BITS(p, ((n)/NFDBITS)) |= ((fd_mask)1 << ((n) % NFDBITS)))
+#define FD_SET(n, p)    (__XBITS(p, ((n)/NFDBITS)) |= ((fd_mask)1 << ((n) % NFDBITS)))
 #endif
 #ifndef FD_CLR
-#define FD_CLR(n, p)    (__XFDS_BITS((p), ((n)/NFDBITS)) &= ~((fd_mask)1 << ((n) % NFDBITS)))
+#define FD_CLR(n, p)    (__XBITS((p), ((n)/NFDBITS)) &= ~((fd_mask)1 << ((n) % NFDBITS)))
 #endif
 #ifndef FD_ISSET
-#define FD_ISSET(n, p)  ((__XFDS_BITS((p), ((n)/NFDBITS))) & ((fd_mask)1 << ((n) % NFDBITS)))
+#define FD_ISSET(n, p)  ((__XBITS((p), ((n)/NFDBITS))) & ((fd_mask)1 << ((n) % NFDBITS)))
 #endif
 #ifndef FD_ZERO
 #define FD_ZERO(p)      bzero((char *)(p), sizeof(*(p)))
@@ -120,34 +120,34 @@ typedef struct fd_set {
  * If it does not exist then the compiler discards the code to access it. 
  */
 #define XFD_ANYSET(p) \
-        ((howmany(FD_SETSIZE, NFDBITS) > 0 && (__XFDS_BITS(p, 0))) || \
-        (howmany(FD_SETSIZE, NFDBITS) > 1 && (__XFDS_BITS(p, 1))) || \
-        (howmany(FD_SETSIZE, NFDBITS) > 2 && (__XFDS_BITS(p, 2))) || \
-        (howmany(FD_SETSIZE, NFDBITS) > 3 && (__XFDS_BITS(p, 3))) || \
-        (howmany(FD_SETSIZE, NFDBITS) > 4 && (__XFDS_BITS(p, 4))) || \
-        (howmany(FD_SETSIZE, NFDBITS) > 5 && (__XFDS_BITS(p, 5))) || \
-        (howmany(FD_SETSIZE, NFDBITS) > 6 && (__XFDS_BITS(p, 6))) || \
-        (howmany(FD_SETSIZE, NFDBITS) > 7 && (__XFDS_BITS(p, 7))))
+        ((howmany(FD_SETSIZE, NFDBITS) > 0 && (__XBITS(p, 0))) || \
+        (howmany(FD_SETSIZE, NFDBITS) > 1 && (__XBITS(p, 1))) || \
+        (howmany(FD_SETSIZE, NFDBITS) > 2 && (__XBITS(p, 2))) || \
+        (howmany(FD_SETSIZE, NFDBITS) > 3 && (__XBITS(p, 3))) || \
+        (howmany(FD_SETSIZE, NFDBITS) > 4 && (__XBITS(p, 4))) || \
+        (howmany(FD_SETSIZE, NFDBITS) > 5 && (__XBITS(p, 5))) || \
+        (howmany(FD_SETSIZE, NFDBITS) > 6 && (__XBITS(p, 6))) || \
+        (howmany(FD_SETSIZE, NFDBITS) > 7 && (__XBITS(p, 7))))
 
 #define XFD_COPYSET(src,dst) { \
         int __i__; \
 		for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
-            __XFDS_BITS((dst), __i__) = __XFDS_BITS((src), __i__); \
+            __XBITS((dst), __i__) = __XBITS((src), __i__); \
         }
 #define XFD_ANDSET(dst,b1,b2) { \
         int __i__; \
         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
-            __XFDS_BITS((dst), __i__) = ((__XFDS_BITS((b1), __i__)) & (__XFDS_BITS((b2), __i__))); \
+            __XBITS((dst), __i__) = ((__XBITS((b1), __i__)) & (__XBITS((b2), __i__))); \
         }
 #define XFD_ORSET(dst,b1,b2) { \
         int __i__; \
         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
-		__XFDS_BITS((dst), __i__) = ((__XFDS_BITS((b1), __i__)) | (__XFDS_BITS((b2), __i__))); \
+		__XBITS((dst), __i__) = ((__XBITS((b1), __i__)) | (__XBITS((b2), __i__))); \
         }        
 #define XFD_UNSET(dst,b1) { \
         int __i__; \
         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
-    		__XFDS_BITS((dst), __i__) &= ~(__XFDS_BITS((b1), __i__)); \
+    		__XBITS((dst), __i__) &= ~(__XBITS((b1), __i__)); \
         }
 
 #else /* USE_POLL */
