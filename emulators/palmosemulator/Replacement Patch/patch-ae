$NetBSD: patch-ae,v 1.2 2003/01/05 03:31:25 dsainty Exp $

Without the first hunk of this patch, ROM transfers tend to not get very far
due to consistently lost characters.

The remainder corrects an assumption in the code that 0 is an invalid file
handle, and registers NetBSD-style tty device names.

--- SrcUnix/EmTransportSerialUnix.cpp.orig	2002-03-29 13:11:19.025952256 +0000
+++ SrcUnix/EmTransportSerialUnix.cpp
@@ -10,7 +10,7 @@
 	the Free Software Foundation; either version 2 of the License, or
 	(at your option) any later version.
 \* ===================================================================== */
-
+#include <sys/select.h>
 #include "EmCommon.h"
 #include "EmTransportSerialUnix.h"
 
@@ -220,7 +220,7 @@ ErrCode EmTransportSerial::HostSetConfig
 	// Programming Mini-Howto") says to turn off these for "raw" (as opposed to
 	// "canonical") mode.
 
-	io.c_lflag &= ~(ICANON | ECHO | ISIG);
+	io.c_lflag &= ~(ICANON | ECHO | ISIG | IEXTEN);
 
 	// The UNIX Programming FAQ (<www://www.faqs.org/faqs/unix-faq/programmer/faq/>)
 	// recommends just setting all the c_iflags and c_oflags to zero.
@@ -541,6 +541,20 @@ void EmTransportSerial::HostGetPortNameL
 #ifdef __QNXNTO__
 	results.push_back ("/dev/ser1");
 	results.push_back ("/dev/ser2");
+#elif __FreeBSD__
+	results.push_back ("/dev/pilot");
+	results.push_back ("/dev/cuaa0");
+	results.push_back ("/dev/cuaa1");
+	results.push_back ("/dev/cuaa2");
+	results.push_back ("/dev/cuaa3");
+#elif __NetBSD__
+	results.push_back ("/dev/pilot");
+	results.push_back ("/dev/tty00");
+	results.push_back ("/dev/tty01");
+	results.push_back ("/dev/tty02");
+	results.push_back ("/dev/tty03");
+	results.push_back ("/dev/ttyU0");
+	results.push_back ("/dev/ttyU1");
 #else
 	results.push_back ("/dev/ttyS0");
 	results.push_back ("/dev/ttyS1");
@@ -596,9 +610,9 @@ void EmTransportSerial::HostGetSerialBau
 EmHostTransportSerial::EmHostTransportSerial (void) :
 	fReadThread (NULL),
 	fWriteThread (NULL),
-	fCommHandle (0),
-	fCommSignalPipeA (0),
-	fCommSignalPipeB (0),
+	fCommHandle (-1),
+	fCommSignalPipeA (-1),
+	fCommSignalPipeB (-1),
 	fTimeToQuit (false),
 	fDataMutex (),
 	fDataCondition (&fDataMutex),
@@ -626,9 +640,9 @@ EmHostTransportSerial::~EmHostTransportS
 {
 	EmAssert (fReadThread == NULL);
 	EmAssert (fWriteThread == NULL);
-	EmAssert (fCommHandle == 0);
-	EmAssert (fCommSignalPipeA == 0);
-	EmAssert (fCommSignalPipeB == 0);
+	EmAssert (fCommHandle == -1);
+	EmAssert (fCommSignalPipeA == -1);
+	EmAssert (fCommSignalPipeB == -1);
 }
 
 
@@ -662,9 +676,9 @@ ErrCode EmHostTransportSerial::OpenCommP
 
 		fCommHandle = open(portName.c_str (), O_RDWR | O_NOCTTY | O_NDELAY);
 
-		if (fCommHandle <= 0)
+		if (fCommHandle < 0)
 		{
-			fCommHandle = 0;
+			fCommHandle = -1;
 
 			return errno;
 		}
@@ -694,7 +708,7 @@ ErrCode EmHostTransportSerial::OpenCommP
 
 ErrCode EmHostTransportSerial::CreateCommThreads (const EmTransportSerial::ConfigSerial& /*config*/)
 {
-	if (fCommHandle)
+	if (fCommHandle != -1)
 	{
 		PRINTF ("EmTransportSerial::HostOpen: Creating serial port handler threads...");
 
@@ -734,40 +748,41 @@ ErrCode EmHostTransportSerial::DestroyCo
 {
 	// If never created, nothing to destroy.
 
-	if (!fCommSignalPipeA)
+	if (fCommSignalPipeA == -1)
 		return errNone;
 
 	// Signal the threads to quit.
 
-	fDataMutex.lock ();
-
-	fTimeToQuit = true;
-
-	int dummy = 0;
-	write (fCommSignalPipeB, &dummy, sizeof (dummy));		// Signals CommRead.
+	if((fCommSignalPipeA != -1) && (fCommSignalPipeB != -1))
+	{
+		fDataMutex.lock();
 
-	fDataCondition.broadcast ();	// Signals CommWrite.
-	fDataMutex.unlock ();
+		fTimeToQuit = true;
 
-	// Wait for the threads to quit.
+		int dummy = 0;
+		write(fCommSignalPipeB, &dummy, sizeof (dummy)); // Signals CommRead.
 
-	if (fReadThread)
-	{
-		fReadThread->join (NULL);
-		fWriteThread->join (NULL);
-	}
+		fDataCondition.broadcast();  // Signals CommWrite.
+		fDataMutex.unlock();
 
-	// Thread objects delete themselves, so set our references to NULL.
+		// Wait for the threads to quit.
 
-	fReadThread = NULL;
-	fWriteThread = NULL;
-
-	// Close the signal pipe.
+		if (fReadThread)
+		{
+			fReadThread->join (NULL);
+			fWriteThread->join (NULL);
+		}
 
-	close (fCommSignalPipeA);
-	close (fCommSignalPipeB);
+		// Thread objects delete themselves, so set our references to NULL.
+		fReadThread = NULL;
+		fWriteThread = NULL;
+
+		// Close the signal pipe.
+		close (fCommSignalPipeA);
+		close (fCommSignalPipeB);
 
-	fCommSignalPipeA = fCommSignalPipeB = 0;
+		fCommSignalPipeA = fCommSignalPipeB = -1;
+	}
 
 	return errNone;
 }
@@ -787,9 +802,11 @@ ErrCode EmHostTransportSerial::DestroyCo
 
 ErrCode EmHostTransportSerial::CloseCommPort (void)
 {
-	(void) close (fCommHandle);
-
-	fCommHandle = 0;
+	if(fCommHandle != -1)
+	{
+		int result = close(fCommHandle);
+		fCommHandle = -1;
+	}
 
 	return errNone;
 }
